import { getLunarCrushAPI } from '../../lib/lunarcrush-api.js';

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ 
      error: 'Method not allowed',
      message: 'Use POST method' 
    });
  }

  try {
    const { username, network = 'x' } = req.body;
    
    if (!username?.trim()) {
      return res.status(400).json({ 
        error: 'Username required',
        message: 'Please provide a username to lookup' 
      });
    }

    // Clean username (remove @ if present)
    const cleanUsername = username.replace('@', '').trim();
    
    // Check if LunarCrush API key is configured
    if (!process.env.LUNARCRUSH_API_KEY) {
      return res.status(500).json({
        error: 'API key missing',
        message: 'LunarCrush API key not configured'
      });
    }

    console.log(`üîç Looking up creator: ${cleanUsername} on ${network}`);

    // Get API client and lookup creator
    const api = getLunarCrushAPI();
    const creatorData = await api.lookupCreator(cleanUsername, network);

    // Validate we got useful data
    if (!creatorData.followers && !creatorData.engagements) {
      return res.status(404).json({
        error: 'Creator not found',
        message: `No data found for @${cleanUsername} on ${network}`,
        details: 'Creator may not exist or may not have sufficient social activity'
      });
    }

    console.log(`‚úÖ Found creator data:`, {
      followers: creatorData.followers,
      engagements: creatorData.engagements,
      rank: creatorData.creatorRank
    });

    // Return clean data for frontend
    res.status(200).json({
      username: cleanUsername,
      network: network,
      followers: creatorData.followers,
      engagements: creatorData.engagements,
      creatorRank: creatorData.creatorRank,
      verified: creatorData.verified,
      socialInfluence: creatorData.socialInfluence
    });

  } catch (error) {
    console.error('‚ùå Lookup error:', error);
    
    // Return specific error details
    if (error.message.includes('not found')) {
      return res.status(404).json({
        error: 'Creator not found',
        message: error.message
      });
    }
    
    if (error.message.includes('Invalid LunarCrush API key')) {
      return res.status(401).json({
        error: 'Authentication failed',
        message: 'Invalid LunarCrush API key'
      });
    }
    
    if (error.message.includes('API key not configured')) {
      return res.status(500).json({
        error: 'Configuration error',
        message: 'LunarCrush API key not configured'
      });
    }
    
    return res.status(500).json({
      error: 'Lookup failed',
      message: error.message || 'Unknown error occurred'
    });
  }
}
