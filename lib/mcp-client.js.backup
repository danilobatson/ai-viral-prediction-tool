import { Client } from '@modelcontextprotocol/sdk/client/index.js';
import { StdioClientTransport } from '@modelcontextprotocol/sdk/client/stdio.js';

class LunarCrushMCP {
  constructor() {
    this.client = null;
    this.connected = false;
  }

  async connect() {
    if (this.connected) return;

    try {
      // Create MCP client with stdio transport
      const transport = new StdioClientTransport({
        command: 'npx',
        args: ['@lunarcrush/mcp-server'],
        env: {
          ...process.env,
          LUNARCRUSH_API_KEY: process.env.LUNARCRUSH_API_KEY
        }
      });

      this.client = new Client(
        {
          name: 'viral-prediction-tool',
          version: '1.0.0'
        },
        {
          capabilities: {
            tools: {}
          }
        }
      );

      await this.client.connect(transport);
      this.connected = true;
      console.log('✅ LunarCrush MCP connected');
    } catch (error) {
      console.error('❌ MCP connection failed:', error);
      throw new Error(`MCP connection failed: ${error.message}`);
    }
  }

  async lookupCreator(username, network = 'x') {
    if (!this.connected) {
      await this.connect();
    }

    try {
      // Use the Creator tool from LunarCrush MCP
      const result = await this.client.callTool({
        name: 'LunarCrush MCP:Creator',
        arguments: {
          network: network,
          screenName: username
        }
      });

      // Parse the result and extract key data
      return this.parseCreatorData(result.content);
    } catch (error) {
      console.error('❌ Creator lookup failed:', error);
      throw new Error(`Creator lookup failed: ${error.message}`);
    }
  }

  parseCreatorData(content) {
    // Extract follower count, engagement, and other metrics from MCP response
    const text = Array.isArray(content) ? content[0]?.text || '' : content?.text || '';
    
    const data = {
      followers: null,
      engagements: null,
      creatorRank: null,
      verified: null,
      socialInfluence: null
    };

    try {
      // Extract followers (format: "Followers: 222,121,272")
      const followersMatch = text.match(/Followers:\s*([\d,]+)/);
      if (followersMatch) {
        data.followers = parseInt(followersMatch[1].replace(/,/g, ''));
      }

      // Extract engagements (format: "Engagements: 54,050,170")
      const engagementsMatch = text.match(/Engagements:\s*([\d,]+)/);
      if (engagementsMatch) {
        data.engagements = parseInt(engagementsMatch[1].replace(/,/g, ''));
      }

      // Extract creator rank (format: "CreatorRank: 51")
      const rankMatch = text.match(/CreatorRank:\s*(\d+)/);
      if (rankMatch) {
        data.creatorRank = parseInt(rankMatch[1]);
      }

      // Extract social influence data
      const influenceMatch = text.match(/Social category influence([\s\S]*?)(?=###|\Z)/);
      if (influenceMatch) {
        data.socialInfluence = influenceMatch[1].trim();
      }

    } catch (parseError) {
      console.warn('⚠️ Error parsing creator data:', parseError);
    }

    return data;
  }

  async disconnect() {
    if (this.client && this.connected) {
      await this.client.close();
      this.connected = false;
      console.log('✅ LunarCrush MCP disconnected');
    }
  }
}

// Singleton instance
let mcpInstance = null;

export function getLunarCrushMCP() {
  if (!mcpInstance) {
    mcpInstance = new LunarCrushMCP();
  }
  return mcpInstance;
}
